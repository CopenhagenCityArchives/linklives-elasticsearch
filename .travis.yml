os: linux
dist: xenial

language: php

php:
  - 7.3

services:
  - docker

before_install:
  # Stop travis mysql as we're using MySQL in an image
  - sudo service mysql stop
  # Print Docker version for debugging purposes
  - docker --version
     
# Setup containers, run tests, clean up, build and push Docker image
script:
  # Prepare for deployment of Docker image
  - pip install --user awscli # install aws cli w/o sudo
  - export PATH=$PATH:$HOME/.local/bin # put aws in the path
  - aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 282251075226.dkr.ecr.eu-west-1.amazonaws.com #needs AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY envvars
  
  # Run tests!

  # set image tag based on branch
  - sed -i "s/{image-tag}/${IMAGE_TAG}/g" docker-compose.yml

  # build linklives-elasticsearch image
  - docker build -f ./elasticsearch/elasticsearch.Dockerfile  -t linklives-elasticsearch ./elasticsearch

before_deploy: 
  # tag and push linklives-elasticsearch image
  - docker tag linklives-elasticsearch 282251075226.dkr.ecr.eu-west-1.amazonaws.com/linklives-elasticsearch:${IMAGE_TAG}
  - docker push 282251075226.dkr.ecr.eu-west-1.amazonaws.com/linklives-elasticsearch:${IMAGE_TAG}

deploy:
  - provider: elasticbeanstalk
    access_key_id: ${AWS_ACCESS_KEY_ID}
    secret_access_key: ${AWS_SECRET_ACCESS_KEY}
    region: eu-west-1
    app: link-lives-data
    env: linklives-data-4
    bucket: elasticbeanstalk-eu-west-1-282251075226
    edge: true
    on:
      branch: main    
  - provider: elasticbeanstalk
    access_key_id: ${AWS_ACCESS_KEY_ID}
    secret_access_key: ${AWS_SECRET_ACCESS_KEY}
    region: eu-west-1
    app: link-lives-data
    env: link-lives-data-3
    bucket: elasticbeanstalk-eu-west-1-282251075226
    edge: true
    on:
      branch: development  